#include <iostream>
#include <ctime>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <queue>
#include <unordered_map>
using namespace std;

void make_random_graph(int n, int e, int graph[100][100]) {
    srand(time(NULL));
    int count_edge = 0;

    for (int j = 0; j < n; j++) {
        for (int i = 0; i < n; i++) {
            graph[j][i] = 0;
        }
    }

    while (count_edge < e) {
        int i = rand() % n;
        int j = rand() % n;

        if (i != j && graph[i][j] == 0) {
            graph[i][j] = graph[j][i] = 1;
            count_edge++;
        }
    }

    for(int j=0;j<n;j++){
        for(int i=0;i<n;i++){
            cout<<graph[j][i]<<" ";
        }
        cout<<endl;
    }
    cout<<endl;
}

void make_adj_list(int n,int graph[100][100]){
    int k=0,h=0;
    char A='A';
    for(int j=0;j<n;j++){
        cout<<char(A+k)<<"[ ]";
        for(int i=0;i<n;i++){

            if(graph[j][i]==1){
                cout<<"-> "<<char('A'+h);
            }
            h=h+1;

        }
        h=0;
        k=k+1;
        cout<<endl;
    }
    cout<<endl;
}

void build_adjacency_list(int n, vector<int>& parent, unordered_map<int, vector<int>>& adj_list) {
    for (int i = 0; i < n; i++) {
        if (parent[i] != -1) {
            adj_list[parent[i]].push_back(i);
        }
    }
}

void print_adjacency_list(const unordered_map<int, vector<int>>& adj_list, const string& tree_type) {
    cout << tree_type << " Tree (串列表示):" << endl;
    for (const auto& pair : adj_list) {
        cout << char('A' + pair.first)<< "[]";
        for (int v : pair.second) {
            cout << "-> "<< char('A' + v) ;
        }
        cout << endl;
    }
    cout<<endl;
}

void DFS_visit(int u, int n, int graph[100][100], vector<int>& visited, vector<int>& parent, int& time) {
    visited[u] = 1;
    time++;

    for (int v = 0; v < n; v++) {
        if (graph[u][v] == 1 && visited[v] == 0) {
            parent[v] = u;
            DFS_visit(v, n, graph, visited, parent, time);
        }
    }

    time++;
}

void DFS(int n, int graph[100][100]) {
    vector<int> parent(n, -1);
    vector<int> visited(n, 0);
    int time = 0;

    for (int u = 0; u < n; u++) {
        if (visited[u] == 0) {
            DFS_visit(u, n, graph, visited, parent, time);
        }
    }

    unordered_map<int, vector<int>> adj_list;
    build_adjacency_list(n, parent, adj_list);

    // Check for unvisited nodes and add them to adjacency list
    for (int u = 0; u < n; u++) {
        if (visited[u] == 0) {
            adj_list[u]; // Add unvisited node to adjacency list
        }
    }

    // Print adjacency list
    cout << "DFS Tree (串列表示):" << endl;
    for (int u = 0; u < n; u++) {
        cout << char('A' + u) << "[ ]";
        if (adj_list.find(u) == adj_list.end()) {
            cout << "-> no child" << endl;
        } else {
            for (int v : adj_list[u]) {
                cout << "-> " << char('A' + v);
            }
            cout << endl;
        }
    }
    cout << endl;
}

void BFS(int n, int graph[100][100]) {
    vector<int> parent(n, -1);
    queue<int> q;
    vector<int> visited(n, 0);

    for (int u = 0; u < n; u++) {
        if (visited[u] == 0) {
            q.push(u);
            visited[u] = 1;

            while (!q.empty()) {
                int v = q.front();
                q.pop();

                for (int w = 0; w < n; w++) {
                    if (graph[v][w] == 1 && visited[w] == 0) {
                        visited[w] = 1;
                        parent[w] = v;
                        q.push(w);
                    }
                }
            }
        }
    }

    unordered_map<int, vector<int>> adj_list;
    build_adjacency_list(n, parent, adj_list);

    // Check for unvisited nodes and add them to adjacency list
    for (int u = 0; u < n; u++) {
        if (visited[u] == 0) {
            adj_list[u]; // Add unvisited node to adjacency list
        }
    }

    // Print adjacency list
    cout << "BFS Tree (串列表示):" << endl;
    for (int u = 0; u < n; u++) {
        cout << char('A' + u) << "[ ]";
        if (adj_list.find(u) == adj_list.end()) {
            cout << "-> no child" << endl;
        } else {
            for (int v : adj_list[u]) {
                cout << "-> " << char('A' + v);
            }
            cout << endl;
        }
    }
    cout << endl;
}



void show_vertex_edges(int n,int graph[100][100]){
    cout<<endl;
    int k=0,h=0;
    char A='A';
    for(int j=0;j<n;j++){
        for(int i=0;i<n;i++){
            if(graph[j][i]==1){
                cout<<char('A'+k)<<endl;
            }
            h=h+1;

        }
        k=k+1;
        h=0;
    }
    cout<<"------------"<<endl;
    k=0,h=0;
    A='A';
    for(int j=0;j<n;j++){
        for(int i=0;i<n;i++){
            if(graph[j][i]==1){
                cout<<char('A'+h)<<endl;
            }
            h=h+1;

        }
        k=k+1;
        h=0;
    }
}

int main(){
    int n,e;
    cout<<"vertex數目：";
    cin>>n;
    cout<<"edge數目：";
    cin>>e;
    if(e>((n*(n-1))/2)){
    	cout<<"error";
    	return 0;
	}
    cout<<endl;
    int graph[100][100];
    make_random_graph(n,e,graph);
    make_adj_list(n,graph);
    DFS(n,graph);
    BFS(n,graph);
    show_vertex_edges(n,graph);
    return 0;
}
