#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>
#include <regex>
#include <filesystem>
#include <winsock2.h>
#include <ws2tcpip.h>

#pragma comment(lib, "ws2_32.lib")

class WebDownloader {
private:
    std::string url;
    std::string outputDir;
    std::string host;
    std::string path;
    int port = 80;
    int imgnum = 0;

    bool parseURL(const std::string& inputUrl) {
        std::regex url_regex(R"(^(https?://)?([^/]+)(/.*)?$)");
        std::smatch match;

        if (!std::regex_match(inputUrl, match, url_regex)) {
            std::cerr << "Invalid URL format: " << inputUrl << std::endl;
            return false;
        }

        host = match[2];
        path = match[3].str().empty() ? "/" : match[3].str();

        size_t colon_pos = host.find(':');
        if (colon_pos != std::string::npos) {
            try {
                port = std::stoi(host.substr(colon_pos + 1));
                host = host.substr(0, colon_pos);
            } catch (...) {
                std::cerr << "Invalid port number" << std::endl;
                return false;
            }
        }

        return true;
    }

    bool checkOutputDirectory() {
        try {
            std::filesystem::create_directories(outputDir);
            if (!std::filesystem::exists(outputDir) || !std::filesystem::is_directory(outputDir)) {
                std::cerr << "Cannot write to output directory" << std::endl;
                return false;
            }
        } catch (const std::filesystem::filesystem_error& e) {
            std::cerr << "Directory error: " << e.what() << std::endl;
            return false;
        }
        return true;
    }

    void saveToFile(const std::string& filePath, const char* data, size_t size) {
        std::ofstream outFile(filePath, std::ios::binary);
        if (outFile) {
            // 寫入 UTF-8 BOM
            const char bom[] = { (char)0xEF, (char)0xBB, (char)0xBF };
            outFile.write(bom, sizeof(bom));
            
            // 寫入內容
            outFile.write(data, size);
            outFile.close();
            std::cout << "Saved: " << filePath << std::endl;
        } else {
            std::cerr << "Failed to save file: " << filePath << std::endl;
        }
    }

    void Download_Image(const std::string& imageUrl) {
        std::cout << "Downloading image: " << imageUrl << std::endl;

        size_t begin = imageUrl.find("//") + 2;
        size_t end = imageUrl.find('/', begin);
        std::string hostname = imageUrl.substr(begin, end - begin);
        std::string pagepath = imageUrl.substr(end);

        WSADATA wsaData;
        WSAStartup(MAKEWORD(2, 2), &wsaData);
        SOCKET sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

        struct hostent* host = gethostbyname(hostname.c_str());
        sockaddr_in sa = { AF_INET };
        sa.sin_port = htons(80);
        memcpy(&sa.sin_addr, host->h_addr, 4);

        connect(sock, (sockaddr*)&sa, sizeof(sa));
        std::string reqInfo = "GET " + pagepath + " HTTP/1.1\r\nHost: " + hostname + "\r\nConnection:Close\r\n\r\n";
        send(sock, reqInfo.c_str(), reqInfo.size(), 0);

        std::string photoname = outputDir + "/" + std::to_string(imgnum++) + ".jpg";
        char buffer[8192];
        int bytesReceived;

        std::ofstream file(photoname, std::ios::binary);
        bool isHeaderParsed = false;
        while ((bytesReceived = recv(sock, buffer, sizeof(buffer), 0)) > 0) {
            if (!isHeaderParsed) {
                char* bodyStart = strstr(buffer, "\r\n\r\n");
                if (bodyStart) {
                    size_t headerSize = bodyStart - buffer + 4;
                    file.write(bodyStart + 4, bytesReceived - headerSize);
                    isHeaderParsed = true;
                }
            } else {
                file.write(buffer, bytesReceived);
            }
        }

        file.close();
        closesocket(sock);
        WSACleanup();

        std::cout << "Saved: " << photoname << std::endl;
    }

    std::string fetchHTMLContent() {
        WSADATA wsaData;
        SOCKET connectSocket = INVALID_SOCKET;
        struct addrinfo* result = NULL, * ptr = NULL, hints;

        if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
            std::cerr << "WSAStartup failed" << std::endl;
            return "";
        }

        ZeroMemory(&hints, sizeof(hints));
        hints.ai_family = AF_UNSPEC;
        hints.ai_socktype = SOCK_STREAM;
        hints.ai_protocol = IPPROTO_TCP;

        if (getaddrinfo(host.c_str(), std::to_string(port).c_str(), &hints, &result) != 0) {
            std::cerr << "Cannot resolve host" << std::endl;
            WSACleanup();
            return "";
        }

        for (ptr = result; ptr != NULL; ptr = ptr->ai_next) {
            connectSocket = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);
            if (connectSocket == INVALID_SOCKET) continue;

            if (connect(connectSocket, ptr->ai_addr, (int)ptr->ai_addrlen) == SOCKET_ERROR) {
                closesocket(connectSocket);
                connectSocket = INVALID_SOCKET;
                continue;
            }
            break;
        }

        freeaddrinfo(result);

        if (connectSocket == INVALID_SOCKET) {
            std::cerr << "Could not connect to server" << std::endl;
            WSACleanup();
            return "";
        }

        std::string request = "GET " + path + " HTTP/1.1\r\nHost: " + host + "\r\nConnection: close\r\n\r\n";
        if (send(connectSocket, request.c_str(), request.length(), 0) == SOCKET_ERROR) {
            std::cerr << "Send failed" << std::endl;
            closesocket(connectSocket);
            WSACleanup();
            return "";
        }

        char recvbuf[4096];
        int bytesReceived;
        std::ostringstream response;

        while ((bytesReceived = recv(connectSocket, recvbuf, sizeof(recvbuf), 0)) > 0) {
            response.write(recvbuf, bytesReceived);
        }

        closesocket(connectSocket);
        WSACleanup();

        std::string content = response.str();
        size_t bodyPos = content.find("\r\n\r\n");
        if (bodyPos != std::string::npos) {
            return content.substr(bodyPos + 4);
        }

        return "";
    }

    void extractResourcesAndSaveHTML(std::string& content) {
        std::regex img_regex(R"(src\s*=\s*["']([^"']+\.(jpg|jpeg|png|gif|bmp))["'])");
        std::sregex_iterator it(content.begin(), content.end(), img_regex);
        std::sregex_iterator end;

        while (it != end) {
            std::string imageUrl = (*it)[1].str();

            if (imageUrl.substr(0, 4) != "http") {
                if (imageUrl[0] == '/') {
                    imageUrl = "http://" + host + imageUrl;
                } else {
                    imageUrl = "http://" + host + path.substr(0, path.find_last_of('/') + 1) + imageUrl;
                }
            }

            std::string localPath = std::to_string(imgnum) + ".jpg";
            Download_Image(imageUrl);

            content.replace(it->position(1), it->length(1), localPath);
            ++it;
        }

        std::string htmlPath = outputDir + "/index.html";
        saveToFile(htmlPath, content.c_str(), content.size());
    }

public:
    void downloadInteractively() {
        std::cout << "Enter URL to download: ";
        std::getline(std::cin, url);

        std::cout << "Enter output directory (press Enter for default 'output'): ";
        std::getline(std::cin, outputDir);
        if (outputDir.empty()) {
            outputDir = "output";
        }

        if (!parseURL(url) || !checkOutputDirectory()) {
            std::cerr << "Setup failed!" << std::endl;
            return;
        }

        std::string content = fetchHTMLContent();
        if (!content.empty()) {
            extractResourcesAndSaveHTML(content);
            std::cout << "Download completed successfully!" << std::endl;
        } else {
            std::cerr << "Failed to fetch HTML content!" << std::endl;
        }

        std::cout << "Press any key to exit..." << std::endl;
        system("pause");
    }
};

int main() {
    WebDownloader downloader;
    downloader.downloadInteractively();
    return 0;
}
